
Instructions Added to LC3++ Assembly Language:
RST
    Assembler Format
        RST DR
    Operation
        DR = 0
        setcc();
    Description
        Resets a register specified by DR. Sets condition codes to zero.
    Examples
        RST R1 ; R1 <- 0
SUB
    Assembler Formats
        SUB DR, SR1, SR2
        SUB DR, SR1, imm5
    Operation
        if (SR2)
            DR = SR1 - SR2;
        else
            DR = SR1 - imm5;
        setcc();
    Description
        Contents of second source operand are subtracted from contents of first source operand, and result is stored in destination register.
        The condition codes are set, based on whether the result is negative, zero, or positive.
    Examples
        SUB R1, R2, R3 ; R1 <- R2 - R3
        SUB R1, R2, #5 ; R1 <- R2 - 5
MLT
    Assembler Formats
        MLT DR, SR1, SR2
        MLT DR, SR1, imm5
    Operation
        if (SR2)
            DR = SR1 * SR2;
        else
            DR = SR1 * imm5;
        setcc();
    Description
        Contents of second source operand are multiplied with contents of first source operand, and result is stored in destination register.
        The condition codes are set, based on whether the result is negative, zero, or positive.
    Examples
        MLT R1, R2, R3 ; R1 <- R2 * R3
        MLT R1, R2, #5 ; R1 <- R2 * 5
OR
    Assembler Formats
        OR DR, SR1, SR2
        OR DR, SR1, imm5
    Operation
        if (SR2)
            DR = SR1 OR SR2;
        else
            DR = SR1 OR imm5;
        setcc();
    Description
        Contents of second source operand are bitwise ORed with contents of first source operand, and result is stored in destination register.
        The condition codes are set, based on whether the binary result produced, taken as a 2's complement integer, is negative, zero, or positive.
    Examples
        OR R1, R2, R3 ; R1 <- R2 OR R3
        OR R1, R2, #5 ; R1 <- R2 OR 5
EXP
    Assembler Formats
        EXP DR, SR1, SR2
        EXP DR, SR1, imm5
    Operation
        if (SR2)
            DR = SR1 ** SR2;
        else
            DR = SR1 ** imm5;
        setcc();
    Description
        Contents of first source operand are raised to the power of contents of second source operand, and result is stored in destination register.
        The condition codes are set, based on whether the result is negative, zero, or positive. 
        Second source operand must be >= 0. If second source operand < 0, nothing will be computed and condition codes will be set to negative.
        0**0 = 1 in this implementation.
    Examples
        EXP R1, R2, R3 ; R1 <- R2 ** R3
        EXP R1, R2, #5 ; R1 <- R2 ** 5   
RAND
    Assembler Format
        RAND DR, SR1
    Operation
        DR <- RAND(SR1)
        setcc();
    Description
        Generates a pseduo-random number using SR1 as seed. Stores pseduo-random number in DR.
        The condition codes are set, based on whether the result is negative, zero, or positive.
    Examples
        RAND R1, R2 ; R1 <- pseudo-random number
CYPH
    Assembler Format
        CYPH SR1, SR2
    Operation
        for i in range 10:
            get char;
            char += rand shift;
            write char;
        SR1 = rand shift;
        SR2 = address of first char in mem;
        setcc();
    Description
        Prompts user to input ten chars. Randomly generated private key is added to each char. Encrypted chars are written to memory, followed by 0 terminator.
        Private key written to SR1. Address of first char written to SR2. Set condition code based on memory address.
        SR1 and SR2 must be distinct or information will be lost.
    Examples
        CYPH R1, R2 ; R1 <- private key; R2 <- address of first encrypted char

Testing Framework for LC3++:
    Checks whether new operations write the correct value to carry out the instruction.
    Output format: 
    <Test Name>
    line num <line num>: <1 or 0>
    Test Complete

    A 1 following the line number means that the line has the expected value.
    A 0 following the line number means that the line does not have the expected value.
